Notes from the in-person meeting February 23-24 2015 in Atlanta.

1. We would like to implement NAACCR 15 (but keep NAACCR 14) for the NAACCR conference.

2. We are removing the concept of group, children, shadow field, etc... This is a concept that makes sense only in
   the flat file world, and we don't want that baggage in our XML efforts.

3. There will be three instances of dictionaries:
    a) Standard: available within the library, non-editable; defines all items except state req items, and the
       reserved gaps. Note that it also doesn't define the retired items.
    b) Default user-defined:, available within the library, non-editable; defines the state req items as a 1,000
       characters field, and every reserved ones (we have to define those so they can be overridden in the third
       instance of the dictionary, this is because some registries/institutions use those gaps).
    c) User-defined: provided by the user (so editable); replaces entirely the default user-defined one when
       provided.

4. The user-defined dictionary will be provided as a parameter to the library (as opposed to adding an inclusion
   link in the dictionary file itself).

5. For now, the items provided in the user-defined dictionary have to provide a start column and have to fall either
   in the state req items or one of the reserved gaps. That will ensure full compatibility with flat file in version 1.
   [post meeting: the NPCR field should also fall in this "can override" category of fields]

6. The default user-defined dictionary will be used as a starting point, a template. If only a part of a field is
   provided, the rest of the field will be ignored when reading/writing. That means if a user only
   defines the 2 first characters of the state req items, the 998 remaining will be lost when going from flat file to
   XML and back to flat file.

7. The data structure of the dictionary will be
     <NaaccrDictionary dictionaryUri="" naaccrVersion="" description="">
         <ItemDefs>
             <ItemDef ... >
   The dictionaryUri is required, it should use a URL-type convention but to the library it will just be string to
   match between the data and the metadata. The naaccrVersion is required. the description is optional.

8. The data structure of the data will be
     <NaaccrDataExchange baseDictionaryUri="" userDictionaryUri="" recordType="" timeGenerated="">
         <Item...>
         <Patient>
             <item...>
             <Tumor>
                 <Item...>
   The dictionaryUri is required, the userDictionaryUri is optional, the recordType and timeGenerated are required.
   The XSD will allow "any" attributes in addition to the ones we defined; the library will provide a way to
   extract all those attributes without reading the entire file.
   [post meeting: according to these notes, the attribute was going to be "dictionaryUri", but that was changed 
   to "baseDicionsaryUri"; the root tag was also chagned from "NaaccrDataExchange" to just "DataExchange"]

9. In the dictionary, both naaccrId and naaccrNum are required. In the data, naaccrId is required and naaccrNum is
   optional. This might be re-visited if file size becomes an issue. That means the library will only use
   the naaccrId to fetch the item definition, but it will fail the validation if the provided naaccrNum
   doesn't agree with the naaccrId.

10. User-defined dictionaries will only allow item numbers in the 9500-99999 range as specified by NAACCR.

11. We are dropping section from the item definitions, but we keep source of standard. We are not going
    to have a description in this version since the formatting issues would take some time to resolve. We are also
    dropping retiredVersion. We also talked about valid values (lookups); this is desirable but we don't have time to
    look into that now.

12. Both dictionary and data will need a "dictionaryStructureVersion" and "dataStructureVersion" but we will add those
    when we actually need to increase the structure version; they are not needed for version 1.

13. We will allow items outside the Patient tags (so under the DataExchange one). The library will provide a way
    to return them on demand.

14. We talked about adding a link to the parent in the data entities, so a Tumor object would be able to access the
    Patient items, and the Patient would be able to access the NaaccrDataExchange items. This will require extra logic
    in the library and is not going to be available for the NAACCR conference. This can be re-visited later.

15. Grouping tumors within one patient is not always desirable; it makes sense for consolidated data (data
    transmitted from the central registry to the standard setter), but not so much for un-consolidated data
    (transmitted from the hospital to the central registry). Right now the library always group the tumors using the
    patient ID Number (Item #20); we want to change that and add the ability to let the user choose which item(s) to
    use to do that grouping. Defining no item means no grouping (every patient will have a single tumor). We talked
    about using Patient ID Number as a default option, but that might not always be appropriate. Maybe it can be a
    default in the GUI but not in the library...

16. The library can't assume the data will be properly grouped by patient. It needs to support un-grouped data and
    group them on the fly. This doesn't need to be in place for the NAACCR conference. Isaac mentioned he might be
    able to put in place a standalone tool that would be used to sort the file prior to using the library...

17. Decisions were made about what we are going to present at the NAACCR conference; Rich took some good notes, so I
    am not going to duplicate that here...
    
18. Post meeting: the extensions will go after the items, but before the complex entities (Patient for the NaaccrData 
    level and Tumor for the Patient level).


